# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-boilerplate
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
frameworkVersion: ">=1.55.1 <2.0.0"

plugins:
  - serverless-dotenv-plugin
  - serverless-plugin-typescript 
  - serverless-offline-scheduler # Need to use sls offline start / sls schedule 
  - serverless-offline
  - serverless-plugin-split-stacks
  - serverless-s3-deploy
  - serverless-secrets-plugin

provider:
  ## project variables
  profile: ${file(./secrets.yml):profile,'default'} # to avoid incidental deployment to other accounts (Value:aws-profile-name)
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage} # default-> dev
  region: ap-south-1          # default-> us-east-1
  ## Plugin variables 
  # websocketApiRouteSelectionExpression: $request.body.action # default value

  ## you can define service wide environment variables here
  environment:
    STAGE : ${self:custom.stage}
    REGION: ${self:provider.region}
    DB_HOST_NAME: ${self:custom.secrets.db.hostName}
    DB_PORT: ${self:custom.secrets.db.port}
    DB_USER_NAME: ${self:custom.secrets.db.userName}
    DB_PASSWORD: ${self:custom.secrets.db.password}
    AWS_PROFILE: ${self:provider.profile}
  

# s3 buckets custom configuration can be placed under provider (in camelCase not PascalCase)
# Sub properties should be according to the specification
  # s3:
  #   exampleBucket:
  #     name: my-custom-bucket-name
  #     versioningConfiguration:
  #       Status: Enabled

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"


## you can add packaging information here
package:
  individually: true  # Allowed values: false|true # default value:false # true will create separate zip for each lambda function
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
  excludeDevDependencies: true

custom:
  
  ## project variables
  defaultStage: dev   # dev is default stage 
  stage: ${opt:stage,self:custom.defaultStage} # set custom stage variable to use in other places
  appName: ${self:service}
  exampleBucketName: ${self:custom.appName}-${self:custom.stage}-example-bucket
  hostedBucketName: ${self:custom.appName}-${self:custom.stage}-asif.com
  secrets: ${file(environments/secrets.${self:custom.stage}.yml)}
  resourcePrefix: ${self:custom.appName}-${self:custom.stage}
  userpoolName: ${self:custom.resourcePrefix}-userpool
  userpoolClientName: ${self:custom.resourcePrefix}-userpool-client
  ## plugins variables
  # serverless-plugin-split-stack
  splitStacks:
    perFunction: false
    perType: true
  # serverless s3 sync
  assets:
    auto: true  # start uploading object after deployment to all buckets
    targets:
      - bucket: ${self:custom.hostedBucketName} # Ref: serverless variable can also be used
        files:
          - source: ../assets   # several sources can be provided
            acl: public-read  # make each uploaded object public
            globs: '**/*.html' # TODO: check the usage, not working without this
            defaultContentType: text/html
            headers:
              CacheControl: max-age=31104000 # 1 year
  # serverless secret plugin
  secretsFilePathPrefix: environments
  # serverless-dotenv-plugin
  dotenv:
    basePath: environments/
    # logging: false # to disable logs for environment variables

## Add Lambda functions configuration here
functions:
  # lambda functions for cognito trigger
  - ${file(src/modules/user/lambda-triggers/cognito-lambda-triggers.yml)}
  # user defined functions
  - ${file(src/modules/hello/functions1.yml)}
  - ${file(src/modules/hello/functions2.yml)}
  # websockets lambda functions
  - ${file(src/modules/websocket/socket.yml)}
  # for ses example
  - ${file(src/modules/ses-example/ses.yml)}


## you can add CloudFormation resource templates here
resources:
  # yaml file for storing all s3 buckets
  - ${file(resources/buckets.yml):resources}
  # yaml file for user pools and clients 
  - ${file(resources/user-pools.yml):resources}
  
Outputs:
  exampleBucketName:
    ${file(./resources/buckets.yml):outputs.exampleBucketName}
  s3HostedWebsiteURL: 
    ${file(./resources/buckets.yml):outputs.s3HostedWebsiteURL}
  # NewOutput:
  #   Description: "Description for the output"
  #   Value: "Some output value"
